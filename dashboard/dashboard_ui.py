import streamlit as st
import pandas as pd
import os
import matplotlib.pyplot as plt
from datetime import datetime
import krakenex
from config import KRAKEN_API_KEY, KRAKEN_API_SECRET

# -- Utility --
def load_data(file, empty_cols=None, parse_dates=None):
    if not os.path.exists(file):
        if empty_cols:
            return pd.DataFrame(columns=empty_cols)
        else:
            return pd.DataFrame()
    for enc in ['utf-8', 'cp1255', 'cp1252', 'iso-8859-8']:
        try:
            return pd.read_csv(file, parse_dates=parse_dates, encoding=enc)
        except UnicodeDecodeError:
            continue
        except Exception as e:
            # ????? ???? ¡ª ?? ?? ???? ????
            continue
    # ?? ??? ???? ¡ª ????? ????????? ??? (?? ????? ?????)
    if empty_cols:
        return pd.DataFrame(columns=empty_cols)
    return pd.DataFrame()


# -- Kraken Portfolio (Live) --
def get_kraken_portfolio(api_key, api_secret):
    api = krakenex.API(api_key, api_secret)
    try:
        balance_resp = api.query_private('Balance')
        if balance_resp.get('error'):
            st.error(f"????? ?????? ???????: {balance_resp['error']}")
            return pd.DataFrame()
        balances = balance_resp['result']
        # ????? ?????? ???????
        balances = {k: float(v) for k, v in balances.items() if float(v) > 0}
        if not balances:
            st.info("?? ????? ?????? ?????? ?????? Kraken.")
            return pd.DataFrame()
        # ????? ???? ????? ??? ????
        price_resp = api.query_public('Ticker', {'pair': ','.join([f"{coin}USD" for coin in balances.keys()])})
        prices = {}
        for pair, info in price_resp['result'].items():
            prices[pair.replace('USD','')] = float(info['c'][0])
        portfolio = []
        for coin, amount in balances.items():
            # ????? ?????? ??? Kraken naming (XETH ¡ú ETH, XBT ¡ú BTC ???¡¯)
            symbol = coin.replace('XBT', 'BTC').replace('XETH', 'ETH').replace('XXRP','XRP').replace('XLTC','LTC').replace('ZUSD','USD').replace('ZEUR','EUR')
            price = prices.get(symbol, 0)
            value_usd = amount * price
            portfolio.append({
                '????': symbol,
                '????': amount,
                '???? ????? ($)': value_usd,
                '???? ?????': price
            })
        portf_df = pd.DataFrame(portfolio)
        portf_df.sort_values('???? ????? ($)', ascending=False, inplace=True)
        return portf_df
    except Exception as e:
        st.error(f"????? API: {e}")
        return pd.DataFrame()

# -- Paths --
MARKET_LIVE = "data/market_live.csv"
MARKET_HISTORY = "data/market_history.csv"
OPTIMIZATION_SUMMARY = "data/param_optimization_summary.csv"
NEWS_FEED = "data/news_feed.csv"

st.set_page_config(page_title="??????? ??? ??????", layout="wide")

st.title("?? ??????? ??? ?????? ??????")
st.markdown("##### ??? ??? ????????? ?????, ????? ???????, ????? ?????? ??????? ???????????.")

# --- ????? ???? ???? (???? / ????????) ---
source = st.radio("??? ???? ??????:", ["???? (??)", "????????"])
if source == "???? (??)":
    market_df = load_data(MARKET_LIVE,encoding='cp1255', empty_cols=['timestamp', 'pair', 'price', 'volume', 'high_24h', 'low_24h'], parse_dates=['timestamp'])
else:
    market_df = load_data(MARKET_HISTORY,encoding='cp1255', empty_cols=['timestamp', 'pair', 'price', 'volume', 'high_24h', 'low_24h'], parse_dates=['timestamp'])

if not market_df.empty:
    pairs = sorted(market_df['pair'].unique())
    selected = st.multiselect("??? ?????? ??????? (?? 5):", pairs, default=pairs[:2], max_selections=5)

    st.subheader("?? ??? ?????? ????? ??????")
    fig, ax = plt.subplots()
    for symbol in selected:
        df = market_df[market_df['pair'] == symbol].sort_values('timestamp')
        ax.plot(df['timestamp'], df['price'], label=symbol)
    ax.set_xlabel("???")
    ax.set_ylabel("????")
    ax.legend()
    st.pyplot(fig)

    st.subheader("?? ??? ?????? + ????? ?? + ????? ???")
    coin_vol = st.selectbox("??? ???? ?????? ???????", pairs, index=0)
    df = market_df[market_df['pair'] == coin_vol].sort_values('timestamp')
    df['sma'] = df['price'].rolling(window=20).mean()
    df['std'] = df['price'].rolling(window=20).std()
    fig2, ax2 = plt.subplots()
    ax2.plot(df['timestamp'], df['price'], label="????")
    ax2.plot(df['timestamp'], df['sma'], label="????? ?? (20)")
    ax2.fill_between(df['timestamp'], df['sma']-df['std'], df['sma']+df['std'], color='gray', alpha=0.2, label="????? ???")
    ax2.set_xlabel("???")
    ax2.set_ylabel("????")
    ax2.legend()
    st.pyplot(fig2)

    fig3, ax3 = plt.subplots()
    ax3.bar(df['timestamp'], df['volume'], width=0.01, color='orange', label="??????")
    ax3.set_xlabel("???")
    ax3.set_ylabel("??????")
    st.pyplot(fig3)

    st.markdown(f"""
    **???? ?????**: {df['price'].iloc[-1]:,.4f}  
    **???? ?????**: {df['price'].iloc[0]:,.4f}  
    **????? ?????**: {((df['price'].iloc[-1] / df['price'].iloc[0] - 1) * 100):.2f}%  
    **???**: {df['price'].max():,.4f}  
    **???**: {df['price'].min():,.4f}
    """)

    # -- ????????? ????? ???? --
    st.subheader("?? ????????? ????? ?-Kraken")
    kraken_portf = get_kraken_portfolio(KRAKEN_API_KEY, KRAKEN_API_SECRET)
    if not kraken_portf.empty:
        st.dataframe(kraken_portf, use_container_width=True)
        total_val = kraken_portf['???? ????? ($)'].sum()
        st.success(f"?? ??? ????: ${total_val:,.2f}")
    else:
        st.info("??? ?????? ?????? ?? ????? ?????? ??API.")

    # -- Alerts (???' ???? ?? ????? ??) --
    price_changes = ((df['price'].iloc[-1] / df['price'].iloc[0] - 1) * 100)
    if price_changes > 10:
        st.warning(f"?? {coin_vol} ??? ????? ?-10%!")
    if price_changes < -10:
        st.warning(f"?? {coin_vol} ??? ????? ?-10%!")

    # -- ????? --
    news_df = load_data(NEWS_FEED, empty_cols=['timestamp','title','url','currencies','sentiment','source','domain','summary'])
    with st.expander("?? ????? ??????"):
        if not news_df.empty:
            st.write(news_df[['timestamp','title','currencies','sentiment','source']].head(15))
        else:
            st.info("?? ????? ?????.")

    # -- ??????????? --
    opt_df = load_data(OPTIMIZATION_SUMMARY)
    with st.expander("?? ?????? ???????????"):
        if not opt_df.empty:
            st.dataframe(opt_df.sort_values('avg_profit_pct', ascending=False).head(20), use_container_width=True)
        else:
            st.info("??? ????? ?????? ???????????.")

    # -- ????????? (?????????) --
    st.subheader("?? ???? ????????? ?? ?? ??????? ?????")
    auto_sim = st.button("?? ???? ????????? (?? ?? ???????)")
    sim_status_placeholder = st.empty()
    sim_results_placeholder = st.empty()

    if auto_sim:
        import time
        from modules.simulation_core import run_simulations_all_coins
        sim_status_placeholder.info("????????? ???, ???? ?????...")
        try:
            run_simulations_all_coins()
            sim_status_placeholder.success("????????? ??????? ??")
            sim_sum = load_data("data/simulation_summary.csv", encoding='cp1255')
            sim_results_placeholder.dataframe(sim_sum.sort_values('final_balance', ascending=False).head(15))
        except Exception as e:
            sim_status_placeholder.error(f"????? ????? ????????: {e}")

else:
    st.error("??? ????? ???? ?????.")

if st.button("?? ???? ???????"):
    st.experimental_rerun()

st.caption("??? ?????? Kraken | ??????? ??? ? Powered by Streamlit")
